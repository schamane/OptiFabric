buildscript {
	repositories {
		jcenter()
		maven {
			name = 'Fabric'
			url = 'https://maven.fabricmc.net/'
		}
	}
	dependencies {
		classpath "net.fabricmc:fabric-loom:0.2.3-SNAPSHOT"
	}
}

apply plugin: net.fabricmc.loom.LoomGradlePlugin

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenCentral()
	maven {
		name "Modmuss50 Repository"
		url 'https://maven.fabricmc.net/'
	}
	maven { url 'https://jitpack.io' }
}

minecraft {
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modCompile 'com.github.Chocohead:Fabric-ASM:c4ad22d'
	include 'com.github.Chocohead:Fabric-ASM:c4ad22d'

	//Used to handle the zip processing
	compile 'org.zeroturnaround:zt-zip:1.13'
	include 'org.zeroturnaround:zt-zip:1.13'

	//Required for zt-zip, kinda annoying
	include 'org.slf4j:slf4j-simple:1.7.26'
	include 'org.slf4j:slf4j-api:1.7.26'

	//Used only in dev to generate the field names
	compile ('net.fabricmc:stitch:0.2.0.53+') {
		transitive = false
	}
	include 'net.fabricmc:stitch:0.2.0.53+'
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper

task unzip(type: Copy) {
	def zipFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
	def outputDir = file("${buildDir}/unpacked/dist")

	if(outputDir.exists()){
		outputDir.deleteDir()
	}

	from zipTree(zipFile)
	into outputDir
}

task modevJar (type: Jar, dependsOn: unzip) {
	classifier = 'moddev'

	def tempFile = file("${buildDir}/temp/fabric.mod.json")
	tempFile.mkdirs()
	tempFile.delete()
	
	def json = new JsonSlurper().parseText(file("src/main/resources/fabric.mod.json").text)
	json.jars = configurations.include.resolve().stream().map{f -> new FileHolder("META-INF/jars/" + f.getName())}.toArray()
	tempFile.write JsonOutput.toJson(json)
	from tempFile
	
	from (sourceSets.main.output) {
		exclude "fabric.mod.json"
		exclude '*.jar'
	}
}

afterEvaluate { project ->
	projects.logger.lifecycle("hi")
	project.configurations.include.resolve().stream().forEach{f ->
		def file = file("${buildDir}/unpacked/dist/META-INF/jars/${f.getName()}")
		projects.logger.lifecycle(file.getName() + ":" + f.getName())
		modevJar.from (file) {
			into ("META-INF/jars")
		}
	}
}


class FileHolder {
	String file

	FileHolder(String file) {
		this.file = file
	}
}

modevJar.dependsOn remapJar
build.dependsOn modevJar

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}